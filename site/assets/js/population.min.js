function Population(population_size,target_word){this.population=Array(population_size);for(let i=0;i<population_size;i++)this.population[i]=new DNA(target_word.length);this.generation=0,this.population_size=population_size,this.target_word=Array(target_word.length);for(let i=0;i<target_word.length;i++)this.target_word[i]=target_word[i];this.target=target_word,this.perfect=!1}function random_element_with_weights(iterable,weights){if(iterable.length!=weights.length)throw"Passed Iterable and Weights should be of same size";{let weight_sum,rand_weight=sum(weights)*Math.random();for(let i=0;i<weights.length;i++)if(rand_weight-=weights[i],rand_weight<=0)return iterable[i]}}function sum(iterable){let sum=0;for(let i=0;i<iterable.length;i++)sum+=iterable[i];return sum}Population.prototype.natural_selection=function(){let fitness=Array(this.population_size);for(let i=0;i<this.population_size;i++)fitness[i]=this.population[i].calculate_fitness(this.target_word);return fitness},Population.prototype.reproduction=function*(mutation_per=.01){let weights=this.natural_selection(),best=void 0,best_fitness=0;for(let i=0;i<this.population_size;i++){let parent_1=random_element_with_weights(this.population,weights),parent_2=random_element_with_weights(this.population,weights),child=parent_1.crossover(parent_2);child.mutation(mutation_per),this.population[i]=child;let fitness=child.calculate_fitness(this.target_word);if(fitness>best_fitness&&(best=child,best_fitness=fitness),null==best&&(best=child,best_fitness=fitness),this.check_perfect(child.genes)){this.perfect=!0;break}}yield best},Population.prototype.check_perfect=function(word){for(let i=0;i<word.length;i++)if(word[i]!=this.target_word[i])return!1;return!0},Population.prototype.evolution=function*(mutation_per=.01){for(;!this.perfect;){this.generation+=1;for(let best_child of this.reproduction(mutation_per)){let word="";for(let i=0;i<best_child.genes.length;i++)word+=best_child.genes[i];yield{fitness:best_child.fitness,best_word:word,generation:this.generation}}}};